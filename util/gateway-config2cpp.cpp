/**
 * @brief Semtech's gateway JSON config file to c++ source convert utility
 * @file gateway-config2cpp.cpp
 *
 * MIT license
 * Usage:
 *   ./gateway-config2cpp /home/andrei/git/rak_common_for_gateway/lora/rak2287/global_conf_usb/ *.json > gateway-usb-conf.h
 *   ./gateway-config2cpp ~/src/rak_common_for_gateway/lora/rak2287/packet_forwarder/lora_pkt_fwd/global_conf/ *.json
 * @file /home/andrei/git/rak_common_for_gateway/lora/rak2287/global_conf_usb/
 */
#include <string>
#include <vector>
#include <iostream>
#include <sstream>
#include <algorithm>

#include "argtable3/argtable3.h"
#include "lorawan/lorawan-string.h"
#include "lorawan/lorawan-error.h"
#include "lorawan/proto/gw/gateway-file-json.h"
#include "lorawan/lorawan-msg.h"

// i18n
#include <libintl.h>
#define _(String) gettext (String)
// #define _(String) (String)

const std::string programName = "gateway-config2cpp";

#ifdef _MSC_VER
#undef ENABLE_TERM_COLOR
#else
#define ENABLE_TERM_COLOR	1
#endif

class RegionalParameters2CppConfiguration {
public:
    std::vector<std::string> fileNames;
    int verbosity = 0;			// verbosity level
};

/**
 * Parse command line
 * Return 0- success
 *        1- show help and exit, or command syntax error
 *        2- output file does not exists or can not open to write
 **/
int parseCmd(
        RegionalParameters2CppConfiguration *config,
        int argc,
        char *argv[])
{
    // device path
    struct arg_str *a_file_names = arg_strn(nullptr, nullptr, _("<file>"), 1, 100, _("Gateway config JSON file name"));
    struct arg_lit *a_verbosity = arg_litn("v", "verbose", 0, 3, _("Set verbosity level"));
    struct arg_lit *a_help = arg_lit0("?", "help", _("Show this help"));
    struct arg_end *a_end = arg_end(20);

    void *argtable[] = {
            a_file_names, a_verbosity, a_help, a_end
    };

    // verify the argtable[] entries were allocated successfully
    if (arg_nullcheck(argtable) != 0) {
        arg_freetable(argtable, sizeof(argtable) / sizeof(argtable[0]));
        return 1;
    }
    // Parse the command line as defined by argtable[]
    int nerrors = arg_parse(argc, argv, argtable);

    config->verbosity = a_verbosity->count;
    for (size_t i = 0; i < a_file_names->count; i++) {
        config->fileNames.emplace_back(a_file_names->sval[i]);
    }
    // special case: '--help' takes precedence over error reporting
    if ((a_help->count) || nerrors) {
        if (nerrors)
            arg_print_errors(stderr, a_end, programName.c_str());
        std::cerr << _("Usage: ") << programName << std::endl;
        arg_print_syntax(stderr, argtable, "\n");
        arg_print_glossary(stderr, argtable, "  %-25s %s\n");
        std::cerr
                << _("Convert gateway JSON config file to c++ source e.g.\n")
                << _("\t./gateway-config2cpp ~/git/rak_common_for_gateway/lora/rak2287/global_conf_usb/*.json > gateway_usb_conf.h")
                << std::endl;

        arg_freetable(argtable, sizeof(argtable) / sizeof(argtable[0]));
        return ERR_CODE_COMMAND_LINE;
    }

    arg_freetable(argtable, sizeof(argtable) / sizeof(argtable[0]));
    return 0;
}

/**
 * global_conf.as_915_921.json  global_conf.as_917_920.json  global_conf.au_915_928.json  global_conf.eu_433.json      global_conf.in_865_867.json  global_conf.ru_864_870.json
 * global_conf.as_915_928.json  global_conf.as_920_923.json  global_conf.cn_470_510.json  global_conf.eu_863_870.json  global_conf.kr_920_923.json  global_conf.us_902_928.json
 * -> as_915_921 ...
 */
static std::string fileName2VarName(
        const std::string &fileName
) {
    size_t last = fileName.find_last_of('.');
    if (last == std::string::npos)
        return fileName;
    std::string r = fileName.substr(0, last);
    last = r.find_last_of('.');
    if (last == std::string::npos)
        return r;
    return r.substr(last + 1);
}

static void addPrefixHeader(
    std::ostream &strm,
    const std::vector<std::string> &files
)
{
    strm
            << "/**\n"
            << " *\n"
            << " * Autogenerated file. Do not modify.\n"
            << " *\n"
            << " * Generated by:\n"
            << " *      ./gateway-config2cpp ";
    for (const auto & file : files) {
        strm << file << " ";
    }
    strm << "\n *\n */\n\n"
            "#include \"gateway-settings.h\"\n\n"
            "GatewaySettings lorawanGatewaySettings[] = {";
}

static void addSuffixHeader(
    std::ostream &strm
) {
    strm << "};\n";
}

static void addFilePrefixHeader(
    std::ostream &strm
)
{
    strm << "\n";
}

int main(int argc, char **argv)
{
    RegionalParameters2CppConfiguration config;
    int r = parseCmd(&config, argc, argv);
    if (r != 0)
        exit(ERR_CODE_COMMAND_LINE);
    bool isFirstFile = true;

    addPrefixHeader(std::cout, config.fileNames);
    std::cout << "\n";

    for (std::vector<std::string>::const_iterator it(config.fileNames.begin()); it != config.fileNames.end(); it++) {
        if (isFirstFile)
            isFirstFile = false;
        else
            std::cout << ",";
        GatewayConfigFileJson gwcfj;
        std::string s = file2string(it->c_str());
        gwcfj.parseString(s);
        if (gwcfj.errorCode) {
            std::cerr << ERR_MESSAGE << gwcfj.errorCode << ": " << strerror_lorawan_ns(gwcfj.errorCode) << std::endl;
            continue;
        }
        if (config.verbosity > 0)
            std::cerr << gwcfj.toString();
        std::string vn = fileName2VarName(*it);

        addFilePrefixHeader(std::cout);
        gwcfj.toHeader(std::cout, vn);
    }
    addSuffixHeader(std::cout);
}
