/**
 * @brief Regional parameters JSON file to c++ source convert utility
 * @file regional-parameters2cpp.cpp
 *
 * MIT license
 * Usage:
 *   ./regional-parameters2cpp /home/andrei/git/rak_common_for_gateway/lora/rak2287/global_conf_usb/ *.json > regional-settings.h
 *   ./regional-parameters2cpp gen/regional-parameters.json > gen/regional-parameters.h
 */
#include <string>
#include <vector>
#include <iostream>

#include "argtable3/argtable3.h"
#include "lorawan/lorawan-error.h"
#include "lorawan/regional-parameters/regional-parameter-channel-plan-file-json.h"
#include "lorawan/lorawan-msg.h"

#include "gen/regional-parameters-3.h"


// i18n
// #include <libintl.h>
// #define _(String) gettext (String)
#define _(String) (String)

const std::string programName = "regional-parameters2cpp";

#ifdef _MSC_VER
#undef ENABLE_TERM_COLOR
#else
#define ENABLE_TERM_COLOR	1
#endif

class RegionalParameters2CppConfiguration {
public:
    std::vector<std::string> fileNames;
    int verbosity = 0;			// verbosity level
};

/**
 * Parse command line
 * Return 0- success
 *        1- show help and exit, or command syntax error
 *        2- output file does not exists or can not open to write
 **/
int parseCmd(
        RegionalParameters2CppConfiguration *config,
        int argc,
        char *argv[])
{
    // device path
    struct arg_str *a_file_names = arg_strn(nullptr, nullptr, "<file>", 1, 100, "Regional parameters JSON file name");
    struct arg_lit *a_verbosity = arg_litn("v", "verbose", 0, 3, "Set verbosity level");
    struct arg_lit *a_help = arg_lit0("?", "help", "Show this help");
    struct arg_end *a_end = arg_end(20);

    void *argtable[] = {
            a_file_names, a_verbosity, a_help, a_end
    };

    // verify the argtable[] entries were allocated successfully
    if (arg_nullcheck(argtable) != 0) {
        arg_freetable(argtable, sizeof(argtable) / sizeof(argtable[0]));
        return 1;
    }
    // Parse the command line as defined by argtable[]
    int nerrors = arg_parse(argc, argv, argtable);

    config->verbosity = a_verbosity->count;
    for (size_t i = 0; i < a_file_names->count; i++) {
        config->fileNames.emplace_back(a_file_names->sval[i]);
    }
    // special case: '--help' takes precedence over error reporting
    if ((a_help->count) || nerrors) {
        if (nerrors)
            arg_print_errors(stderr, a_end, programName.c_str());
        std::cerr << "Usage: " << programName << std::endl;
        arg_print_syntax(stderr, argtable, "\n");
        arg_print_glossary(stderr, argtable, "  %-25s %s\n");
        std::cerr
                << "Convert regional parameters JSON file(s) to c++ source e.g.\n"
                   "\t./regional-parameters2cpp gen/regional-parameters.json > gen/regional-parameters.h"
                << std::endl;

        arg_freetable(argtable, sizeof(argtable) / sizeof(argtable[0]));
        return ERR_CODE_COMMAND_LINE;
    }

    arg_freetable(argtable, sizeof(argtable) / sizeof(argtable[0]));
    return 0;
}

static void addPrefixHeader(
    std::ostream &strm,
    const std::vector<std::string> &files
)
{
    strm
        << "#ifndef REGIONAL_PARAMETERS_AUTOGEN_H\n"
        << "#define REGIONAL_PARAMETERS_AUTOGEN_H\n\n"
        << "/**\n"
        << " *\n"
        << " * Autogenerated file. Do not modify.\n"
        << " *\n"
        << " * Generated by:\n"
        << " *      ./regional-parameters2cpp ";
    for (const auto & file : files) {
        strm << file << " ";
    }
    strm << "\n *\n */\n\n"
        "#include \"lorawan/regional-parameters/regional-parameter-channel-plan-mem.h\"\n\n"
        "RegionalParameterChannelPlanMem regionalParameterChannelPlanMem({";
}

static void addSuffixHeader(
        std::ostream &strm
) {
    strm << "\n\t}\n);\n#endif\n";
}

static void addFilePrefixHeader(
    std::ostream &strm,
    const std::string &fileName
)
{
    strm << "\t// file " << fileName << "\n";
}

int main(int argc, char **argv)
{
    RegionalParameters2CppConfiguration config;
    int r = parseCmd(&config, argc, argv);
    if (r != 0)
        exit(ERR_CODE_COMMAND_LINE);
    addPrefixHeader(std::cout, config.fileNames);
    std::cout << "\n";

    bool isFirst = true;
    for (std::vector<std::string>::const_iterator it(config.fileNames.begin()); it != config.fileNames.end(); it++) {
        if (config.verbosity > 1)
            std::cerr << _("File: ") << *it << std::endl;
        if (!isFirst)
            std::cout << ",";
        RegionalParameterChannelPlanFileJson rpfj;
        rpfj.init(*it, nullptr);
        if (rpfj.errCode) {
            std::cerr << ERR_MESSAGE << rpfj.errCode << ": " << strerror_lorawan_ns(rpfj.errCode) << std::endl;
            continue;
        }

        std::cout <<"\n\n\nJSON:\n" << rpfj.toJsonString();

        std::cout <<"\n-----------------------\n";

        if (config.verbosity > 1) {
            std::cerr << _("Regions: ");
            for (auto &b: rpfj.storage.bands) {
                std::cerr << b.value.cn << " ";
            }
            std::cerr << std::endl;
        }

        addFilePrefixHeader(std::cout, *it);
        rpfj.toHeader(std::cout, isFirst);
        isFirst = false;
    }
    addSuffixHeader(std::cout);


    std::cout <<"\n\n\nMemory:\n";
    std::cout << regionalParameterChannelPlanMem.toJsonString();
}
